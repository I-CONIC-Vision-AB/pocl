---
name: Linux SYCL-CTS tests

permissions:
  contents: read

on:
  workflow_dispatch:
  schedule:
# at 0:23 UTC every saturday
    - cron: '23 0 * * 6'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - 'CHANGES'
      - 'COPYING'
      - 'CREDITS'
      - 'LICENSE'
      - 'README.*'
      - 'tools/docker/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CCACHE_BASEDIR: "${{ github.workspace }}"
  CCACHE_DIR: "${{ github.workspace }}/../../../ccache_storage"
  EXAMPLES_DIR: "${{ github.workspace }}/../../../examples"

jobs:
  sycl_cts_matrix:
    name: "LLVM ${{ matrix.llvm }} - SYCL CTS on ${{ matrix.device }}"
    runs-on: [self-hosted, linux, x64, "sycl_cts_${{matrix.device}}" ]
    strategy:
      fail-fast: false
      matrix:
        llvm: [20]
        device: [cpu, gpu]
        type: [cts]

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Load Env vars
        id: load-env
        run: |
          cat ${{ github.workspace }}/.github/variables.txt >> $GITHUB_ENV

      - name: CMake
        id: cmake
        run: |
          runCMake() {
            BUILD_FLAGS="-O1 -march=native -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable"
            cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=Release "-DCMAKE_C_FLAGS_RELEASE=$BUILD_FLAGS" "-DCMAKE_CXX_FLAGS_RELEASE=$BUILD_FLAGS" \
            -DENABLE_TESTSUITES=SYCL_CTS -DTESTSUITE_SOURCE_BASEDIR=${EXAMPLES_DIR}/source -DTESTSUITE_BASEDIR=${EXAMPLES_DIR}/build_oneapi \
            -DSYCL_CXX_COMPILER=/opt/intel/oneapi/compiler/latest/bin/icpx -DSYCL_LIBDIR=/opt/intel/oneapi/compiler/latest/lib \
            -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-${{ matrix.llvm }} -DLLVM_SPIRV=/usr/bin/llvm-spirv-${{ matrix.llvm }} \
            "$@" -B ${{ github.workspace }}/build ${{ github.workspace }}
          }

          rm -rf ${{ github.workspace }}/build
          mkdir ${{ github.workspace }}/build
          mkdir -p ${EXAMPLES_DIR}/build_oneapi
          mkdir -p ${EXAMPLES_DIR}/source

          if [ "${{ matrix.device }}" == "cpu" ]; then
            runCMake -DENABLE_HOST_CPU_DEVICES=1 -DENABLE_CONFORMANCE=ON
          elif [ "${{ matrix.device }}" == "gpu" ]; then
            runCMake -DENABLE_HOST_CPU_DEVICES=0 -DENABLE_LEVEL0=1 -DSTATIC_LLVM=ON -DENABLE_CONFORMANCE=OFF
          else
            echo "Unknown configuration" && exit 1
          fi

      - name: Build PoCL
        id: build_pocl
        timeout-minutes: 20
        run: |
          cd ${{ github.workspace }}/build && make -j$(${{ github.workspace }}/.github/scripts/get_cpus.sh)

      - name: Build Examples
        id: build_examples
        # SYCL_CTS takes long time to build
        timeout-minutes: 240
        run: |
          cd ${{ github.workspace }}/build/examples/SYCL_CTS && make -j$(${{ github.workspace }}/.github/scripts/get_cpus.sh) SYCL_CTS

      - name: Cache Sycl-CTS timings
        id: cache_sycl_cts
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        with:
          path: ${{ github.workspace }}/build/Testing/Temporary/CTestCostData.txt
          key: ctest-cache-${{ runner.name }}-sycl-cts-${{ matrix.device }}-${{ github.run_id }}
          restore-keys: ctest-cache-${{ runner.name }}-sycl-cts-${{ matrix.device }}

      # on PRs and manual triggered runs:
      # avoids running tests that are broken and/or take long time
      - name: Run Short CTS
        env:
          POCL_CACHE_DIR: "${{ runner.temp }}/GH_POCL_CACHE"
        id: run_sycl_cts_short
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        timeout-minutes: 40
        run: |
          rm -rf ${{ env.POCL_CACHE_DIR }}
          mkdir ${{ env.POCL_CACHE_DIR }}
          source /opt/intel/oneapi/setvars.sh

          if [ "${{ matrix.device }}" == "cpu" ]; then
            cd ${{ github.workspace }}/build && ${{ github.workspace }}/tools/scripts/run_oneapi_tests_cpu -j4 $CTEST_FLAGS -E 'sycl_cts_test_math_builtin_api|sycl_cts_test_multi_ptr|sycl_cts_test_kernel|sycl_cts_test_kernel_bundle|sycl_cts_test_group_functions|sycl_cts_test_sub_group|sycl_cts_test_device_selector|sycl_cts_test_event'
          elif [ "${{ matrix.device }}" == "gpu" ]; then
            cd ${{ github.workspace }}/build && ${{ github.workspace }}/tools/scripts/run_oneapi_tests_gpu -j4 $CTEST_FLAGS -E 'sycl_cts_test_math_builtin_api|sycl_cts_test_multi_ptr|sycl_cts_test_kernel|sycl_cts_test_kernel_bundle|sycl_cts_test_group_functions|sycl_cts_test_nd_item|sycl_cts_test_reduction|sycl_cts_test_vector_api|sycl_cts_test_group|sycl_cts_test_spec_constants|sycl_cts_test_event'
          else
            echo "Unknown configuration" && exit 1
          fi

      # on schedule only:
      # runs every test in CTS
      - name: Run Full CTS
        env:
          POCL_CACHE_DIR: "${{ runner.temp }}/GH_POCL_CACHE"
        id: run_sycl_cts_full
        if: ${{ github.event_name == 'schedule' }}
        timeout-minutes: 480
        run: |
          rm -rf ${{ env.POCL_CACHE_DIR }}
          mkdir ${{ env.POCL_CACHE_DIR }}
          source /opt/intel/oneapi/setvars.sh

          if [ "${{ matrix.device }}" == "cpu" ]; then
            cd ${{ github.workspace }}/build && ${{ github.workspace }}/tools/scripts/run_oneapi_tests_cpu -j4 $CTEST_FLAGS
          elif [ "${{ matrix.device }}" == "gpu" ]; then
            cd ${{ github.workspace }}/build && ${{ github.workspace }}/tools/scripts/run_oneapi_tests_gpu -j4 $CTEST_FLAGS
          else
            echo "Unknown configuration" && exit 1
          fi
